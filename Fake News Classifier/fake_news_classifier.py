# -*- coding: utf-8 -*-
"""fake_news_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dLZKW-JLoZtHnzJxBG1lNF5U_Q-MPXJ_

## Fake News Classifier

Importing the necessary libraries
"""

import numpy as np
import pandas as pd

"""Loading the dataset"""

df = pd.read_csv('train.csv')
df.head()

"""Understanding the dataset"""

df.shape

df.info()

df.describe()

df.corr()

df.nunique()

df.isnull().sum()

df.duplicated().sum()

"""Preprocessing the data"""

df = df.fillna('')

df['news'] = df['author'] + df['title']

import re
import nltk
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
nltk.download('stopwords')

ps = PorterStemmer()

def stem(text):
  stemmed_text = text.lower()
  stemmed_text = re.sub('[^a-zA-Z]', ' ', stemmed_text)
  stemmed_text = stemmed_text.split()
  stemmed_text = [ps.stem(word) for word in stemmed_text if not word in stopwords.words('english')]
  stemmed_text = ' '.join(stemmed_text)
  return stemmed_text

df['news'] = df['news'].apply(stem)

print(df['news'])

X = df['news'].values
y = df['label'].values

print(X)

print(y)

"""Transforming text to feature vectors"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()
tfidf.fit(X)

X = tfidf.transform(X)
print(X)

"""Splitting the dataset into training and test sets"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 30)

print(X_train)

print(y_train)

"""Training and evaluating the models"""

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

lr = LogisticRegression()
svm = SVC()

models = [lr, svm]
scores = []

for model in models:
  model.fit(X_train, y_train)
  y_pred = model.predict(X_test)
  scores.append(accuracy_score(y_test, y_pred))
  print("Accuracy of " + type(model).__name__ + " is", accuracy_score(y_test, y_pred))

"""Fake News Classifier"""

news = X_test[0]
prediction = svm.predict(news)
print("The news is real." if prediction[0] == 0 else "The news is fake.")